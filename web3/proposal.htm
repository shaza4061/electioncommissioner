<!doctype html>
<html lang="en">
  <head>
    <title>BloSS Proposal</title>
  </head>
  <body>
  <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js"></script>
  <!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">


<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src= "https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
<script>
var web3;
if (typeof web3 !== 'undefined') {
       web3 = new Web3(web3.currentProvider);
       console.log("web3.currentProvider");
   } else {
       // set the provider you want from Web3.providers
       web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
       console.log("http://localhost:8545");
   }
   var accounts = web3.eth.getAccounts();
   //web3.eth.defaultAccount = accounts[0];
var abi = [
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "eligible",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "xG",
        "type": "uint256[2]"
      },
      {
        "name": "vG",
        "type": "uint256[3]"
      },
      {
        "name": "r",
        "type": "uint256"
      }
    ],
    "name": "register",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "withdrawRefund",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "addressid",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totaleligible",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "getVoter",
    "outputs": [
      {
        "name": "_registeredkey",
        "type": "uint256[2]"
      },
      {
        "name": "_reconstructedkey",
        "type": "uint256[2]"
      },
      {
        "name": "_commitment",
        "type": "bytes32"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "endSignupPhase",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "commitmentphase",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "question",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "finishSignupPhase",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "endRefundPhase",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "h",
        "type": "bytes32"
      }
    ],
    "name": "submitCommitment",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalrefunded",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "endCommitmentPhase",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "finishRegistrationPhase",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gap",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalcommitted",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "votecast",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "deadlinePassed",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalvoted",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "params",
        "type": "uint256[4]"
      },
      {
        "name": "y",
        "type": "uint256[2]"
      },
      {
        "name": "a1",
        "type": "uint256[2]"
      },
      {
        "name": "b1",
        "type": "uint256[2]"
      },
      {
        "name": "a2",
        "type": "uint256[2]"
      },
      {
        "name": "b2",
        "type": "uint256[2]"
      }
    ],
    "name": "verify1outof2ZKP",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "charity",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "endVotingPhase",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "commitment",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "registered",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "refunds",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "state",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totaltorefund",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "finaltally",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "totalregistered",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "sendToCharity",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "voters",
    "outputs": [
      {
        "name": "addr",
        "type": "address"
      },
      {
        "name": "commitment",
        "type": "bytes32"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "lostdeposit",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "addresses",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "transferOwnership",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "depositrequired",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "xG",
        "type": "uint256[2]"
      },
      {
        "name": "r",
        "type": "uint256"
      },
      {
        "name": "vG",
        "type": "uint256[3]"
      }
    ],
    "name": "verifyZKP",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "_registryAddress",
        "type": "address"
      },
      {
        "name": "_finishSignupPhaseDuration",
        "type": "uint256"
      },
      {
        "name": "_endSignupPhaseDuration",
        "type": "uint256"
      },
      {
        "name": "_endCommitmentPhaseDuration",
        "type": "uint256"
      },
      {
        "name": "_endVotingPhaseDuration",
        "type": "uint256"
      },
      {
        "name": "_endRefundPhase",
        "type": "uint256"
      },
      {
        "name": "_depositRequired",
        "type": "uint256"
      },
      {
        "name": "_quorumInPercentage",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "msg",
        "type": "string"
      }
    ],
    "name": "DebugEvent0",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "msg",
        "type": "string"
      }
    ],
    "name": "DebugEvent",
    "type": "event"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_proposalType",
        "type": "uint8"
      },
      {
        "name": "_asn",
        "type": "uint256"
      },
      {
        "name": "_ip",
        "type": "bytes32[]"
      },
      {
        "name": "_scAddress",
        "type": "address"
      },
      {
        "name": "_votingAddress",
        "type": "address"
      },
      {
        "name": "_proposalHash",
        "type": "string"
      },
      {
        "name": "_submissionTime",
        "type": "uint256"
      }
    ],
    "name": "submitProposal",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getProposal",
    "outputs": [
      {
        "name": "_proposalType",
        "type": "uint8"
      },
      {
        "name": "_asn",
        "type": "uint256"
      },
      {
        "name": "_ip",
        "type": "bytes32[]"
      },
      {
        "name": "_scAddress",
        "type": "address"
      },
      {
        "name": "_votingAddress",
        "type": "address"
      },
      {
        "name": "_proposalHash",
        "type": "string"
      },
      {
        "name": "_submissionTime",
        "type": "uint256"
      },
      {
        "name": "_proposer",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "startElection",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "params",
        "type": "uint256[4]"
      },
      {
        "name": "y",
        "type": "uint256[2]"
      },
      {
        "name": "a1",
        "type": "uint256[2]"
      },
      {
        "name": "b1",
        "type": "uint256[2]"
      },
      {
        "name": "a2",
        "type": "uint256[2]"
      },
      {
        "name": "b2",
        "type": "uint256[2]"
      }
    ],
    "name": "submitVote",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getQuorumInPercentage",
    "outputs": [
      {
        "name": "_quorumInPercentage",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "cancelProposal",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "getDeposit",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

var electionCommissioner = new web3.eth.Contract(abi,"0xDC7a20473Df6EE6DCB56B2522aFbed8097e7D9b3");

var managedIpString;
var accounts;
var currentState;

electionCommissioner.events.DebugEvent({
  fromBlock: 'latest',
  toBlock: 'latest'
}, function(error, result) {
  if (!error) {
    console.log(result);
  } else {
    console.log(error);
  }
});

var openSignatureFile = function(event) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function() {
      document.getElementById('signature').innerHTML = reader.result;
    }

    reader.readAsText(input.files[0]);
};

var openProposalFile = function(event) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function() {
      let rawText = reader.result.split("|");
      let asn = rawText[0];
       managedIpString = rawText[1];
      let scAddress = rawText[2];
      let votingAddress = rawText[3];
      let managedIp = managedIpString.split(',');

      document.getElementById('asn').value = asn;
      document.getElementById('scAddress').value = scAddress;
      document.getElementById('votingAddress').value = votingAddress;
      for(let i =0; i< managedIp.length; i++) {
        var ul = document.getElementById("managedIp");
        var li = document.createElement("li");
        li.appendChild(document.createTextNode(managedIp[i]));
        ul.appendChild(li);
      }
    }

    reader.readAsText(input.files[0]);
};


async function beginElection() {
  let endSignupDateTime = await electionCommissioner.methods.finishSignupPhase().call();
  let currentBlock = await web3.eth.getBlock("latest");
  let blocktimestamp = currentBlock.timestamp;
  console.log("endSignupDateTime = "+ endSignupDateTime +", blocktimestamp = " + blocktimestamp);
  let overrides = {

    // The address to execute the call as
    from: "0x74A021dE8bd500b26333a05e96761fe323ec57ba",

    // The maximum units of gas for the transaction to use
    gasLimit: 4200000,

}

  let success = await electionCommissioner.methods.finishRegistrationPhase().call(overrides);
  if(success) {
    await electionCommissioner.methods.finishRegistrationPhase().send({from: accounts[0],gas: 4200000});
  } else {
    alert("Problem submitting this proposal");
  }
}

async function sendProposal () {
  let managedIps = [];
  let ul = document.getElementById("managedIp");
  let items = ul.getElementsByTagName("li");
  for (let i = 0; i < items.length; ++i) {
    managedIps.push(web3.utils.asciiToHex(items[i].innerText));
  }

if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        const dateInSeconds = Math.round((new Date).getTime() / 1000);
        let success =  await electionCommissioner.methods.submitProposal(
          document.querySelector("#proposal input[name='proposalType']:checked").value,
          document.getElementById('asn').value,
          managedIps,
          document.getElementById('scAddress').value,
          document.getElementById('votingAddress').value,
          document.getElementById('signature').innerHTML,
          dateInSeconds
        ).call({from: accounts[0],gas: 4200000, value: 1000000000000000000 });

        if (success) {
          try {
            await electionCommissioner.methods.submitProposal(
              document.querySelector("#proposal input[name='proposalType']:checked").value,
              document.getElementById('asn').value,
              managedIps,
              document.getElementById('scAddress').value,
              document.getElementById('votingAddress').value,
              document.getElementById('signature').innerHTML,
              dateInSeconds
            ).send({from: accounts[0],gas: 4200000, value: 1000000000000000000 });
          } catch (error) {
              // User denied account access...
              console.error('User denied account access. [Error]:' + error);
          }
          checkStatus();
        } else {
          alert("There is a problem submitting this proposal.");
        }

    }
    // Legacy dapp browsers...
    else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
        // Acccounts always exposed
        console.log('Legacy dapp browsers...');
    }
    // Non-dapp browsers...
    else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }

};

async function checkStatus() {
  let currentTime = new Date();
  let endRefundTime = await electionCommissioner.methods.endRefundPhase().call();
  console.log("currentTime = " + currentTime + ", endRefundTime = "+ (new Date(endRefundTime* 1000)));
  electionCommissioner.methods.state().call().then(state => {
    currentState = state;
    switch(state) {
      case "0":
        proposalStage();
        break;
      case "1":
      case "2":
      case "3":
        electionStage()
        break;
      case "4":
        refundStage();
        break;
      default:
        disableForm();
    }

  });
}

function proposalStage() {
  document.getElementById('status').innerHTML = " no ";
  document.getElementById("selectProposalBtn").disabled = false;
  document.getElementById("selectSignatureBtn").disabled = false;
  document.getElementById("submitProposalBtn").disabled = false;
  document.getElementById("startElectionBtn").disabled = true;
  document.getElementById("getDepositBtn").disabled = true;
  document.getElementById("resetElectionBtn").disabled = false;
  showFooterPanel();
}

function refundStage() {
  document.getElementById('status').innerHTML = " a ";
  document.getElementById("selectProposalBtn").disabled = true;
  document.getElementById("selectSignatureBtn").disabled = true;
  document.getElementById("submitProposalBtn").disabled = true;
  document.getElementById("startElectionBtn").disabled = true;
  document.getElementById("getDepositBtn").disabled = false;
  document.getElementById("startElectionBtn").classList.add('hidden');
  document.getElementById("resetElectionBtn").classList.remove('hidden');
  document.getElementById("resetElectionBtn").disabled = false;
  let proposal = getProposal();
  proposal.then(prop => {
    populateForms(prop);
    showFooterPanel(prop.proposer, prop.endSignupTime, prop.startElectionExpiredTime);
  });
}

function emptyForm() {
  document.getElementById("footer").style.display="none";
  document.getElementById('asn').value = "";
  document.getElementById('scAddress').value = "";
  document.getElementById('votingAddress').value = "";
  document.getElementById('signature').innerHTML = "";
  document.getElementById("managedIp").value = "";
  document.getElementById("proposer").value = "";
  document.getElementById("submissionTime").value = "";
  document.getElementById("startElectionBtn").classList.add('hidden');
  document.getElementById("resetElectionBtn").classList.remove('hidden');
  document.getElementById("resetElectionBtn").disabled = false;
}

function disableForm() {
  document.getElementById('status').innerHTML = " no ";
  document.getElementById("selectProposalBtn").disabled = true;
  document.getElementById("selectSignatureBtn").disabled = true;
  document.getElementById("submitProposalBtn").disabled = true;
  document.getElementById("startElectionBtn").disabled = true;
  document.getElementById("getDepositBtn").disabled = true;
  document.getElementById("startElectionBtn").classList.add('hidden');
  document.getElementById("resetElectionBtn").classList.remove('hidden');
  document.getElementById("resetElectionBtn").disabled = false;
  emptyForm();
}

async function getProposal() {
  let rawProposal = await electionCommissioner.methods.getProposal().call();
  let managedIpHex = rawProposal[2];
  let managedIpStr = [];
  let totalMembers = await electionCommissioner.methods.totaleligible().call();
  let totalInterest = await electionCommissioner.methods.totalregistered().call();
  let quorumInPercentage = await electionCommissioner.methods.getQuorumInPercentage().call();
  let endSignupDateTime = await electionCommissioner.methods.finishSignupPhase().call();
  let startElectionExpiredDateTime = await electionCommissioner.methods.endSignupPhase().call();

  for(let j = 0; j< managedIpHex.length; j++) {
    managedIpStr.push(web3.utils.hexToUtf8(managedIpHex[j]));
  }

  var proposal = {
    type: rawProposal[0],
    asn : rawProposal[1],
    managedIps : managedIpStr,
    scAddress : rawProposal[3],
    votingAddress : rawProposal[4],
    proposalHash : rawProposal[5],
    submissionTime : rawProposal[6],
    proposer : rawProposal[7],
    totalMembers : totalMembers,
    totalInterest: totalInterest,
    quorumInPercentage: quorumInPercentage,
    endSignupTime: endSignupDateTime,
    startElectionExpiredTime: startElectionExpiredDateTime
  }
  return proposal;
}

function populateForms(proposal) {
  switch(proposal.type) {
    case "0": document.getElementById('addMemberProposal').checked = true;
            break;
    case "1": document.getElementById('removeMemberProposal').checked = true;
            break;
    default: //do nothing
            console.error("Unrecognized proposal type")
            return;
  }
  document.getElementById('asn').value = proposal.asn;
  document.getElementById('scAddress').value = proposal.scAddress;
  document.getElementById('votingAddress').value = proposal.votingAddress;
  document.getElementById('signature').innerHTML = proposal.proposalHash;
  document.getElementById("managedIp").innerHTML = "";
  for(let j = 0; j< proposal.managedIps.length; j++) {
    let ul = document.getElementById("managedIp");
    let li = document.createElement("li");
    li.appendChild(document.createTextNode(proposal.managedIps[j]));
    ul.appendChild(li);
  }
  document.getElementById("proposer").innerHTML = proposal.proposer;
  document.getElementById("totalMembersBadge").innerHTML = proposal.totalMembers;
  document.getElementById("totalInterestBadge").innerHTML = proposal.totalInterest;
  document.getElementById("quorumBadge").innerHTML = proposal.quorumInPercentage + "%";
  let currentDate = new Date();
  let endSignupTime = new Date();
  currentDate.setTime(proposal.submissionTime * 1000);
  endSignupTime.setTime(proposal.endSignupTime * 1000);
  document.getElementById("submissionTime").innerHTML = currentDate.toUTCString();
  document.getElementById("electionTimeLabel").innerHTML = endSignupTime.toUTCString();

}

function showFooterPanel(proposerAddr, endSignupTime, startElectionExpiredTime) {
  console.log("current state = " + currentState);
  let currentTime = new Date();

  if(currentState != "0") {
    document.getElementById("successLabel").classList.remove('hidden');
    if(currentTime.getTime() > endSignupTime* 1000 && currentTime.getTime() < startElectionExpiredTime * 1000) {
      document.getElementById("startElectionBtn").disabled = false;
      document.getElementById("startElectionBtn").classList.remove('hidden');
      document.getElementById("resetElectionBtn").disabled = true;
      document.getElementById("resetElectionBtn").classList.add('hidden');
    } else if (currentTime.getTime() > startElectionExpiredTime * 1000) {
      document.getElementById("proposalExpired").classList.remove('hidden');
      document.getElementById("startElectionBtn").disabled = true;
      document.getElementById("startElectionBtn").classList.add('hidden');
      document.getElementById("resetElectionBtn").disabled = false;
      document.getElementById("resetElectionBtn").classList.remove('hidden');
    } else {
      document.getElementById("resetElectionBtn").disabled = true;
      document.getElementById("resetElectionBtn").classList.add('hidden');
      document.getElementById("startElectionBtn").disabled = true;
      document.getElementById("startElectionBtn").classList.remove('hidden');
    }
    if (typeof proposerAddr !== 'undefined') {
      if(proposerAddr.toUpperCase() == accounts[0].toUpperCase()) {
      document.getElementById("onlyForProposer").classList.remove('hidden');
    }

    }
    document.getElementById("footer").classList.remove('hidden');
  }
}

async function resetElection() {
  let currentTime = new Date();
  let endRefundTime = await electionCommissioner.methods.endRefundPhase().call() ;

  let success = await electionCommissioner.methods.cancelProposal().call({ from: accounts[0], gas: 4200000});

  if(success) {
    electionCommissioner.methods.cancelProposal().send({from: accounts[0],gas: 4200000});
  } else {

    if(currentTime.getTime() < endRefundTime* 1000) {
      alert("A new vote cannot be started until after " + (new Date(endRefundTime* 1000)));
    } else {
      let totaltorefund = await electionCommissioner.methods.totaltorefund().call();
      let totalrefunded = await electionCommissioner.methods.totalrefunded().call();
      alert("Could not restart election" + totaltorefund + " AND " + totalrefunded + " ");
    }
  }
}
function electionStage() {
  let proposal = getProposal();

  document.getElementById('status').innerHTML = " a ";
  document.getElementById("selectProposalBtn").disabled = true;
  document.getElementById("selectSignatureBtn").disabled = true;
  document.getElementById("submitProposalBtn").disabled = true;
  document.getElementById("getDepositBtn").disabled = true;
  proposal.then(prop => {
    populateForms(prop);
    showFooterPanel(prop.proposer, prop.endSignupTime, prop.startElectionExpiredTime);
  });

}

$(document).ready(function () {
  setInterval("checkStatus()", 5000);
  checkStatus();
});

window.addEventListener('load', async () => {
    // Modern dapp browsers...
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            // Request account access if needed
            accounts = await ethereum.enable();
            // Acccounts now exposed
            console.log("Acccounts now exposed");
            console.log(accounts);
        } catch (error) {
            // User denied account access...
            console.log("User denied account access");
            console.warn(error);
        }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
        // Acccounts always exposed
        web3.eth.sendTransaction({/* ... */});
    }
    // Non-dapp browsers...
    else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
});

</script>
<form id="proposal">
  <div class="page-header"><h1>Election Commissioner Proposal</h1></div>
  <h2>There is <span id="status"> no </span> proposal in progress</h2>
  <div class="form-group">
    <label>Proposal Type </label><br/><input type="radio" id="addMemberProposal" name="proposalType" value="0" checked> Add New Member <input type="radio" id="removeMemberProposal" name="proposalType" value="1"> Remove Existing Member
  </div>
  <div class="form-group">
    <label>Load Proposal</label><input id ="selectProposalBtn" type="file" onChange="openProposalFile(event);" disabled>
  </div>
  <div class="form-group">
    <label>ASN</label>
    <input id="asn" readonly>
  </div>
  <div class="form-group">
    <label>Managed IP</label>
    <ul id="managedIp"></ul>
  </div>
  <div class="form-group">
    <label>Reporting Address</label>
    <input id="scAddress" readonly>
  </div>
  <div class="form-group">
    <label>Voting Address</label>
    <input id="votingAddress" readonly>
  </div>
  <div class="form-group">
    <label for="exampleFormControlTextarea1">Signature</label>
    <textarea class="form-control" id="signature" rows="12" readonly></textarea>
    <label class="form-control-sm">Load Signature<input type="file" id="selectSignatureBtn" onChange="openSignatureFile(event);" disabled></label>
  </div>
</form>
<div class="panel panel-default">
    <div class="panel-body hidden" id="footer">
      <p class="bg-success hidden" id="successLabel"><label>Proposed By:</label><span id="proposer"></span> <label>At:</label><span id="submissionTime"></span></p>
      <p class="bg-warning hidden" id="onlyForProposer">You need start the election after <b id="electionTimeLabel"> </b> if number of interest exceeds the quorum</p>
      <p class="bg-danger hidden" id="proposalExpired">This proposal has expired</p>
      <span class="label label-primary" id="totalMembersLabel">Total members:<span class="badge" id ="totalMembersBadge"></span></span>
      <span class="label label-primary" id="totalInterestLabel">Total interest:<span class="badge" id ="totalInterestBadge"></span></span>
      <span class="label label-primary" id="quorumLabel">Quorum:<span class="badge" id ="quorumBadge"></span></span>
    </div>
      <div class="panel-footer">
        <button id="submitProposalBtn" type="button" class="btn btn-primary" onclick="sendProposal();" disabled>Submit</button> &#8594;
        <button id="startElectionBtn" type="button" class="btn btn-primary" onclick="beginElection();" disabled>Start Election</button>
        <button id="resetElectionBtn" type="button" class="btn btn-danger hidden" onclick="resetElection();" disabled>Reset Election</button>&#8594;
        <button id="getDepositBtn" type="button" class="btn btn-primary" onclick="" disabled>Get Deposit</button>
      </div>
  </div>



</body>
</html>
